#!/bin/sh
# First run
[ -d "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/" ] || mkdir -p "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/"
{ [ -f ./spinner/spinner.sh ] && [ ! -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh"]; } && {
   mv ./spinner/spinner.sh "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/"
   sed -E 's/SPINNER_SYMBOLS=.*/SPINNER_SYMBOLS="WIDE_ASCII_PROG"/' -i "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh" # Cache spinner
   sed -E 's,SPINNER_DONEFILE=.*,SPINNER_DONEFILE=~/ends,' -i "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh"
}
##
has() {
  case "$(command -v $1 2>/dev/null)" in
    alias*|"") return 1
  esac
}
deps() {
  deps="jq curl" # Make sure deps can be found
  for i in $deps; do
    if ! has $i; then
      echo "$i IS MISSING!"; missing=$(($missing + 1))
    fi
  done
  [ ${missing:-0} -gt 0 ] || {
    [ ${missing:-0} -gt 1 ] && {
      echo "JQ AND CURL ARE MISSING!"; exit 1
    } || {
      for i in $deps; do
        if ! has $i; then
          echo "$i IS MISSING!"; exit 1
        fi
      done
    }
  }
  # Check for ssl
  curl -V | grep tls -i -q || {
    curl -V | grep ssl -i -q || {
      echo "!!SSL/TLS SUPPORT IS MISSING FROM CURL!!"
      echo "!!SPOTBASH REQUIRES SSL SUPPORT!!"
      exit 1
    }
  }
  #
  export missing="no" # Finaly set missing to no - We can check this variable, instead of calling deps()
}
clean_up(){
  clean="search uri info"
  for i in $clean; do
    [ -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/$i" ] && rm "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/$i" 2>/dev/null
  done
}
auth() {
  if [ ! -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/authkeys" ];then
    { [ -f ./authkeys ] && . ./authkeys; } || {
      echo "ERROR: The AUTHKEYS cache file is missing!! Spotbash needs this file.. If you don't have it, reclone and re-run the setup"; exit 1
    }
  else
    . "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/authkeys"
  fi
  AUTHKEY=$(curl -X POST -d grant_type=refresh_token -d refresh_token="$REKEY" -d client_id="$CLID" -d client_secret="$CLSEC" https://accounts.spotify.com/api/token -s | jq .access_token -r)
  export AUTHKEY; export AUTHD="1"
}
get_info(){
  curl -s -X "GET" "https://api.spotify.com/v1/me/player" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" > "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/info"
  #cat "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/info"
  export infoF="${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/info"
}
track_info(){
  curl -s -X "GET" "https://api.spotify.com/v1/tracks/${2:-$1}" -H "Authorization: Bearer $AUTHKEY" -H "Accept: application/json" -H "Content-Type: application/json"
}
id() {
  # the following is an unedited snippit from makefile - thanks :)
  id=$(curl -X "GET" "https://api.spotify.com/v1/me/player/devices" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer  $AUTHKEY" -s | jq '[.devices[] | select(.is_active) | .id][0]' -r)
}
name(){
  IFS=""
  artemp=$(mktemp)
  artistC=$(jq .item.name,.item.album.artists[].name < "$infoF" | sed -E -e 's/"//g' -e '0,/^/{s/^/Playing: /}' | tr '\n' '~' | sed -E -e 's/~/\nBy: /' | awk -F"~" '/~/ {print NF-1}')
  artist=$(jq .item.name,.item.album.artists[].name < "$infoF" | sed -E -e 's/"//g' -e '0,/^/{s/^/Playing: /}' | tr '\n' '~' | sed -E 's/~/\nBy: /' )
  if [ "$artistC" != 1 ]; then
    echo $artist | sed -E -e 's/~/\, /' -e 's/~/\n/' | tr '\n' '~' | sed -E 's/~~/\n/' | tr '~' '\n' > $artemp
  else
    echo $artist | sed -E 's/~/\n/' | tr '\n' '~' | sed -E 's/~~/\n/' | tr '~' '\n' > $artemp
  fi
  tac $artemp | grep $'\n*' -m 1 | grep ',' -q || {
    cat $artemp | tr '\n' '~' | sed -E -E -e 's/(.*)~/\1SPOTEXLINE/' -e 's/(.*)~/\1, /' -e 's/SPOTEXLINE/~/' | tr '~' '\n' | cat > $artemp
    # tr often breaks when being redirected
    # FINAL FIX - Replace ',' with a newline when only 1 line exists
    [ ! "$(wc -l < $artemp)" -gt 1 ] && {
      sed -E 's/,/\n/' -i $artemp
      sed -E 's/ By:/By:/' -i $artemp
    }
  }
  cat $artemp ; rm $artemp -rf
}
get_volume(){
  jq .device.volume_percent < "$infoF"
}
pause(){
  curl -X PUT -s -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" https://api.spotify.com/v1/me/player/pause
}
resume(){
  curl -s --fail -X PUT --data "{}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" https://api.spotify.com/v1/me/player/play
}
next(){
  curl -X "POST" -s -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" https://api.spotify.com/v1/me/player/next
}
previous(){
  curl -X "POST" -s -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" https://api.spotify.com/v1/me/player/previous
}
device(){
  [ -n "$id" ] && echo "Device: ${id}" || echo "No device..."
}
devices(){
    IFS=""
    curl -X "GET" "https://api.spotify.com/v1/me/player/devices" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer  $AUTHKEY" -s | jq '.devices[] | .name,.id' -r
}
set_volume(){
    curl -s -X PUT -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" "https://api.spotify.com/v1/me/player/volume?volume_percent=$2"
}
search_track(){
    IFS=""
    [ -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/search" ] && . "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/search" || search="$2"
    { echo "$search" | grep -q '[[:space:]]'; } && search=$(printf '%s' "$search" | sed -E 's/[[:space:]]/%20/g')
    curl -s X "GET" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" "https://api.spotify.com/v1/search?q=${search}&limit=9&type=track" | jq '.tracks.items,del(.[]) | .[] | .name,[.artists[].name],.uri' -r -M | sed -E -e '/\[/d' -e '/\]/d' -e 's/[[:blank:]]"/By\: /g' -e 's/"//g' | tr '\n' '~' | sed -E -e 's/~spotify\:/ @ spotify\:/g' -e 's/~ By\:/ By:/g' | tr '~' '\n'
}
#search_album(){
#    IFS=""
#    if [ -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/search" ]; then
#        source "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/search"
#    else
#        search="$2"
#    fi
#    if ! echo "$search" | grep -q '[[:space:]]'; then
#      search=$(printf '%s' "$search" | sed -E 's/[[:space:]]/%20/g')
#    fi
#    curl -s =X "GET" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" "https://api.spotify.com/v1/search?q=${search}&limit=9&type=album" | jq '.[] | .items | .[] | .["name"],[ .artists | .[] | .name ],.["uri"]' | sed -E -e 's/\[//g' -e 's/\]//g' -e '/^[[:space:]]*$/d' -e 's/,//g' -e 's/"//g' -e '/^ *$/d' | sed -E -z -e 's/\n  /  By: /g' -e 's/\nspotify:/ @ spotify:/g'
#} POSIX SED PAIN
play_track(){
    [ -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/uri" ] && . "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/uri" || uri="$2"
    curl -s -X PUT "https://api.spotify.com/v1/me/player/play?device_${id}" --data "{\"uris\":[\"$uri\"]}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY"
}
state() {
  printf 'Playing: %s\n' $(jq .is_playing -r < "$infoF")
}
loop(){
    curl -X "PUT" -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" "https://api.spotify.com/v1/me/player/repeat?state=track"
}
repeat(){
    curl -X "PUT" -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" "https://api.spotify.com/v1/me/player/repeat?state=context"
}
repeat_off(){
    curl -X "PUT" -d device_id="$id" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" "https://api.spotify.com/v1/me/player/repeat?state=off"
}
repeat_state(){
  printf 'Loop State: %s\n' $(jq -r .repeat_state < "$infoF")
}
playlists(){
    echo 'Playlists:' && curl -s -X GET "https://api.spotify.com/v1/me/playlists" -H 'Accept: application/json' -H 'Content-Type: application/json' -H "Authorization: Bearer $AUTHKEY" | jq '.items[] | .name,.uri' -r
}
play(){
  curl -X "PUT" "https://api.spotify.com/v1/me/player/play?device_${id}" --data "{\"context_uri\":\$2\"}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY"
}
trans(){
    [ ! -z $2 ] && {
       export TRANS_ID=${2}
    } || {
       export TRANS_ID=$id
    }
    curl -X "PUT" "https://api.spotify.com/v1/me/player" --data "{\"device_ids\":[\"${TRANS_ID}\"]}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY"
}
shuffle_state(){
    printf 'Shuffle State: %\n' $(jq .shuffle_state < "$infoF")
}
shuffle() {
  shvalue_pre=$(jq .shuffle_state < "$infoF") # Should add a system to grab values - Readability at the cost of speed
  case $shvalue_pre in
      true)
          shvalue="false";;
      false)
          shvalue="true";;
      *)
          [ ${shvalue} ] && {
            curl -X "PUT" "https://api.spotify.com/v1/me/player/shuffle?state=${shvalue}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY"
          } || {
            [ ${2} ] && {
              curl -X "PUT" "https://api.spotify.com/v1/me/player/shuffle?state=${2}" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY"
            } || {
              echo "Could not determine the current shuffle state! :("
              echo "Try again later or use 'arg2' (See help)"; exit 1
            }
          }
        ;;
  esac
}
# Songs func would go here - Spot(y)RIP is overkill, prob will add a rip function
download() {
  has youtube-dl && {
    youtube-dl ytsearch1:"$(name | sed -E -e 's/.*: //g' -e 's/\,.*//' | tr '\n' ' ')" $([ "$1" = "download" ] &&  echo $@ | cut -d' ' -f2-)
  } || {
    echo "youtube-dl is missing!"; exit 1
  }
}
status() {
    name
}
playing() {
    name
}
skip(){
    next
}
pre(){
    previous
}
prev(){
    pre
}
length() {
    curl -X "GET" "https://api.spotify.com/v1/playlists/$2/tracks?market=US" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" -s | jq .total -Mr
}
rip() {
    len="$(length - $2)" # - Is placeholder
    has youtube-dl && {
      echo "Working..."
      [ -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh" ] && {
        . "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh"
        spinner &
        PID=$!
      } || {
        echo "spinner.sh cache missing... (No progress-bar)"
        echo "Please wait..."
      }
      trap '[ -f ${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh ] && { kill $PID; exit 1 ; } || exit 1' INT TERM
      for i in $(seq $len); do
        youtube-dl ytsearch1:"$(curl -X "GET" "https://api.spotify.com/v1/playlists/$2/tracks?market=US&limit=1&offset=$i" -H "Accept: application/json" -H "Content-Type: application/json" -H "Authorization: Bearer $AUTHKEY" -s | jq '.items[].track | .name,.artists[].name ' -r | tr '\n' ' ')"
      done
      [ -f "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/spinner.sh" ] && {
        kill $PID
      }
    } || { echo "youtube-dl is required for rip()... Please install it"; exit 1; }
}
grab() {
  has eyeD3 && {
    [ -f "$2" ] && {
      Tname=$(eyeD3 "$2" | grep "title" | cut -d':' -f2); Tname=${Tname#' '}
      Tart=$(eyeD3 "$2" | grep "artist" | cut -d':' -f2); Tart=${Tart#' '}
      echo "$Tname $Tart"
      Tid=$(search_track - "$Tname $Tart" | head -1 | sed -E 's/.*://')
      Aurl=$(track_info "$Tid" | jq '.album.images[1].url' -r)
      [ "$Aurl" != "null" ] && { curl -L# "$Aurl" --output "$2.jpg"; } || {
        echo "$2 Could not be found..."; exit 1
      }
      eyeD3 --add-image "$2.jpg:FRONT_COVER" "$2"
      rm "$2.jpg"
    } || { echo "Your file is missing..."; exit 1 ; }
  } || { echo "eyeD3 is required for (a)grab()..."; exit 1; }
}
####################################################################################
####################################################################################
help() {
  cat << EOF
***
Spotbash: Spotify Control API ~ Written in bash ~ By ThatGeekyWeeb (Mia)
***
[auth] - Print '\$AUTHKEY' and exit
[device] - Print first device ID and exit
[devices] - List ALL devices and exit
[search_play] - Search for ${2:-'\$2'} and play | ${2:-'\$2'} must be a track
[search_track] - Search for ${2:-'\$2'} and output URI & Artist & name | ${2:-'\$2'} is interpreted as a track
[play_track] - Play Track URI
[get_volume] - Output player volume and exit
[set_volume] - Set player volume to ${2:-'\$2'} and exit
[get_info] - Get debugging info about currently playing device
[pre | prev | previous] - Change playback to previous song
[skip | next] - Change playback to next song
[pause] - Pause playback
[resume] - Resume playback
[loop] - Loop track
[repeat] - Repeat current album/playlist
[state] - Output playback status and exit
[repeat_off] - Disable loop/repeat
[repeat_state] - Output playback repeat status and exit
[playlists] - Output list of users playlists and exit
[play] - Play ${2:-'\$2'} | ${2:-'\$2'} must be Album or Playlist URI
[playing] - Print Song name followed by artist and exit
[left] - Print time left in MS (exact) and exit
[minleft] - Print time left in Mins (approximate) and exit
[shuffle] - Enable/Disable Shuffle | Set to ${2:-'\$2'} if specified
[shuffle_state] - Print state of shuffle and exit
[download] - Download currently playing song using ytdl | "${@:-'\$@'}" are ytdl flags
[grab|agrab] - Grab the album art for a file by searching for it using mp4 mediainfo and embed | ${2:-'\$2'} must be a file
[track_info] - Return info for ${2:-'\$2'} | ${2:-'\$2'} must be a track ID
EOF
}
####################################################################################
####################################################################################
clean_up
deps && {
  auth && get_info && id
} || {
  exit 1
}
case $1 in
    help)
        help; exit 1
        ;;
    auth)
        echo "$AUTHKEY" && clean_up; exit 0
        ;;
    get_info)
        cat "$infoF"; exit 0
        ;;
    search_play)
       auth
       export id
       printf "search='%b'" "${2}" > "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/search"
       sed -E -i -e 's/[[:space:]]/%20/g' "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/search"
       uri=$(search_track | cut -d'@' -f2- | cut -d$'\n' -f1 | sed -E 's/[[:space:]]//g')
       printf "uri='%b'" "${uri}" > "${XDG_CACHE_HOME:-$HOME/.cache/}/spotbash/uri"
       play_track "$@"
       clean_up
       exit 0
       ;;
    agrab)
      grab
      ;;
    "")
      help && clean_up; exit 1
      ;;
    *)
      type ${1} 2>&1 1>/dev/null && {
        ${1} "$@" || {
          echo "Whoops! Something went wrong..."
        } && {
          clean_up; exit 0
        }
      } || {
        help; clean_up; exit 1
      }
      clean_up
      ;;
esac
