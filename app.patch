diff --git a/authorization_code/app.js b/authorization_code/app.js
index 8a1634a..73cf8e5 100644
--- a/authorization_code/app.js
+++ b/authorization_code/app.js
@@ -9,13 +9,24 @@
 
 const express = require("express"); // Express web server framework
 const axios = require("axios");
-const cors = require("cors");
 const querystring = require("querystring");
 const cookieParser = require("cookie-parser");
+/// CORS breaks, like everything I try to do browser side
+/// So, no more CORS + It doesn't matter, since this is a opensource project, and it's up to the user to protect their client_secret
 
-const client_id = "CLIENT_ID"; // Your client id
-const client_secret = "CLIENT_SECRET"; // Your secret
-const redirect_uri = "REDIRECT_URI"; // Your redirect uri
+const client_id = 'id'; // Your client id
+const client_secret = 'sec'; // Your secret
+const redirect_uri = 'http://localhost:5000/callback'; // Your redirect uri
+
+// We need to pass though some variables, into '/public/index.html's script, I've tried everything, last try
+const fs = require('fs');
+const http = require('http');
+//
+
+       // Let's hope this shit works
+       var content = ('const client_id = ' + '"' + client_id + '";' + '\n' + 'const client_secret = ' + '"' + client_secret + '";' + '\n' + 'console.log("client_id is: " + client_id + "\\n client_secret is: " + client_secret);');
+       fs.writeFile('./public/consts.js', content, function (err) {
+                if (err) throw err;});
 
 /**
  * Generates a random string containing numbers and letters
@@ -39,15 +50,15 @@ const app = express();
 
 app
   .use(express.static(__dirname + "/public"))
-  .use(cors())
   .use(cookieParser());
+// Again, no more CORS
 
 app.get("/login", function(req, res) {
   let state = generateRandomString(16);
   res.cookie(stateKey, state);
 
   // your application requests authorization
-  let scope = "user-read-private user-read-email";
+  let scope = 'user-read-private user-read-email user-library-read playlist-modify-private user-read-currently-playing user-modify-playback-state playlist-read-collaborative user-read-playback-state streaming playlist-read-private';
   res.redirect(
     "https://accounts.spotify.com/authorize?" +
       querystring.stringify({
@@ -99,12 +110,14 @@ app.get("/callback", function(req, res) {
             res.redirect(
               "/#" + querystring.stringify({ access_token, refresh_token })
             );
+	 console.log('REKEY=' + refresh_token);
           })
           .catch(e => {
             res.redirect(
               "/#" + querystring.stringify({ error: e.response.data })
             );
           });
+	// I removed the function from here, as it has 0 effect on the Playback SDK, and is 100% useless
       })
       .catch(e => console.error(e.response.data));
   }
@@ -137,6 +150,4 @@ app.get("/refresh_token", function(req, res) {
       console.error(e.response.data);
     });
 });
-
-console.log("Listening on 8888");
-app.listen(8888);
+app.listen(5000);
