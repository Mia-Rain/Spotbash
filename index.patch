diff --git a/public/index.html b/public/index.html
index 9c57f1c..0cbcc10 100644
--- a/public/index.html
+++ b/public/index.html
@@ -19,7 +19,6 @@
   <body>
     <div class="container">
       <div id="login">
-        <h1>This is an example of the Authorization Code flow</h1>
         <a href="/login" class="btn btn-primary">Log in with Spotify</a>
       </div>
       <div id="loggedin">
@@ -46,6 +45,9 @@
             <dt>Link</dt><dd><a href="{{href}}">{{href}}</a></dd>
             <dt>Profile Image</dt><dd class="clearfix"><a href="{{images.0.url}}">{{images.0.url}}</a></dd>
             <dt>Country</dt><dd>{{country}}</dd>
+	    <dt>ID</dt><dd>{{client_id}}</dd>
+	    <dt>Secret</dt>{{client_id}}</dd>
+	    <dt>Device</dt>{{device_id}}</dd>
           </dl>
         </div>
       </div>
@@ -61,6 +63,8 @@
 
     <script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.1/handlebars.min.js"></script>
     <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
+    <script src="https://sdk.scdn.co/spotify-player.js"></script>
     <script>
       (function() {
 
@@ -88,8 +92,8 @@
 
         var params = getHashParams();
 
-        var access_token = params.access_token,
+        const access_token = params.access_token,
             refresh_token = params.refresh_token,
             error = params.error;
 
         if (error) {
           alert('There was an error during the authentication');
@@ -135,7 +140,62 @@
             });
           }, false);
         }
-      })();
+      window.onSpotifyWebPlaybackSDKReady = () => {
+        const player = new Spotify.Player({
+        name: 'Web Playback SDK Quick Start Player',
+        getOAuthToken: cb => { cb(access_token); }
+      });
+
+      // Error handling
+      player.addListener('initialization_error', ({ message }) => { console.error(message); });
+      player.addListener('authentication_error', ({ message }) => { console.error(message); });
+      player.addListener('account_error', ({ message }) => { console.error(message); });
+      player.addListener('playback_error', ({ message }) => { console.error(message); });
+
+      // Playback status updates
+      player.addListener('player_state_changed', state => { console.log(state); });
+
+      // Ready
+      player.addListener('ready', ({ device_id }) => {
+        console.log('Ready with Device ID', device_id);
+      });
+
+      // Not Ready
+      player.addListener('not_ready', ({ device_id }) => {
+        console.log('Device ID has gone offline', device_id);
+      });
+
+player.addListener("player_state_changed", (state) => {
+
+console.log(state);
+if (
+    this.state
+    && state.track_window.previous_tracks.find(x => x.id === state.track_window.current_track.id)
+    && !this.state.paused
+    && state.paused
+    ) {
+    console.log('Track ended');
+    this.setTrackEnd(true);
+  }
+this.state = state;
+});
+	  function refresh() {
+	  axios({
+          	method: "post",
+          	url: "https://accounts.spotify.com/api/token",
+		client_id: client_id,
+		client_secret: client_secret,
+		grant_type: 'refresh_token',
+		refresh_token: refresh_token,
+          	headers: { "Content-Type": "application/x-www-form-urlencoded" }
+          })
+	  }
+	  setInterval(refresh, 1000 * 56 * 56);
+
+      // Connect to the player!
+      player.connect();
+    };
+})();
     </script>
   </body>
 </html>
