diff --git a/authorization_code/public/index.html b/authorization_code/public/index.html
index 9c57f1c..9742959 100644
--- a/authorization_code/public/index.html
+++ b/authorization_code/public/index.html
@@ -1,8 +1,9 @@
 <!doctype html>
 <html>
   <head>
-    <title>Example of the Authorization Code flow with Spotify</title>
+    <title>Spotbash Playback SDK</title>
     <link rel="stylesheet" href="//netdna.bootstrapcdn.com/bootstrap/3.1.1/css/bootstrap.min.css">
+    <link rel="icon" href="https://cdn.discordapp.com/attachments/699685435198144553/758393878947561522/spotbash_ex2.png">
     <style type="text/css">
       #login, #loggedin {
         display: none;
@@ -13,13 +14,15 @@
         white-space: nowrap;
         width: 500px;
       }
+      dd#sec {
+        width: 100px;
+      }
     </style>
   </head>
 
   <body>
     <div class="container">
       <div id="login">
-        <h1>This is an example of the Authorization Code flow</h1>
         <a href="/login" class="btn btn-primary">Log in with Spotify</a>
       </div>
       <div id="loggedin">
@@ -46,6 +49,9 @@
             <dt>Link</dt><dd><a href="{{href}}">{{href}}</a></dd>
             <dt>Profile Image</dt><dd class="clearfix"><a href="{{images.0.url}}">{{images.0.url}}</a></dd>
             <dt>Country</dt><dd>{{country}}</dd>
+	    <dt>Client ID</dt><dd id="CLID"></dd>
+	    <dt>Client Secret</dt><dd id="sec" class="text-overflow"></dd>
+	    <dt>Device ID</dt><dd id="DEVID"></dd>
           </dl>
         </div>
       </div>
@@ -61,7 +67,15 @@
 
     <script src="//cdnjs.cloudflare.com/ajax/libs/handlebars.js/2.0.0-alpha.1/handlebars.min.js"></script>
     <script src="http://code.jquery.com/jquery-1.10.1.min.js"></script>
+    <script src="/consts.js"></script>
+    <script src="https://cdn.jsdelivr.net/npm/axios/dist/axios.min.js"></script>
+    <script src="https://sdk.scdn.co/spotify-player.js"></script>
     <script>
+     document.getElementById('CLID').innerHTML = client_id;
+     document.getElementById('sec').innerHTML = client_secret;
+     if (client_id === undefined || client_secret === null) {
+     	console.log('Help Me');
+     }
       (function() {
 
         /**
@@ -88,7 +102,7 @@
 
         var params = getHashParams();
 
-        var access_token = params.access_token,
+        const access_token = params.access_token,
             refresh_token = params.refresh_token,
             error = params.error;
 
@@ -135,7 +149,76 @@
             });
           }, false);
         }
-      })();
+      window.onSpotifyWebPlaybackSDKReady = () => {
+        const player = new Spotify.Player({
+        name: 'Web Playback SDK Quick Start Player',
+        getOAuthToken: cb => { cb(access_token); }
+      });
+
+      // Error handling
+      player.addListener('initialization_error', ({ message }) => { console.error(message); });
+      player.addListener('authentication_error', ({ message }) => { console.error(message); });
+      player.addListener('account_error', ({ message }) => { console.error(message); });
+      player.addListener('playback_error', ({ message }) => { console.error(message); });
+
+      // Playback status updates
+      player.addListener('player_state_changed', state => { console.log(state); });
+
+      // Ready
+      player.addListener('ready', ({ device_id }) => {
+        console.log('Ready with Device ID', device_id);
+      	document.getElementById('DEVID').innerHTML = device_id;
+      });
+
+      // Not Ready
+      player.addListener('not_ready', ({ device_id }) => {
+        console.log('Device ID has gone offline', device_id);
+      });
+
+player.addListener("player_state_changed", (state) => {
+
+console.log(state);
+if (
+    this.state
+    && state.track_window.previous_tracks.find(x => x.id === state.track_window.current_track.id)
+    && !this.state.paused
+    && state.paused
+    ) {
+    console.log('Track ended');
+    this.setTrackEnd(true);
+  }
+this.state = state;
+});
+	  console.log('Is ' + client_id + ' the client_id?' + '\n Is ' + client_secret + ' the client_secret?');
+	  console.log('Our refresh_token is ' + refresh_token);
+	  // If we get 2 weird looking codes in the console, then is fucking worked!
+	  function refresh() {
+		axios.post(  
+			'https://accounts.spotify.com/api/token',
+			new URLSearchParams({
+				grant_type: "refresh_token",
+			        client_id: client_id,
+			        client_secret: client_secret,
+			        refresh_token: refresh_token  
+			}).toString(),
+		{
+			headers: {
+				'Content-Type': 'application/x-www-form-urlencoded',
+				'Authorization': 'Basic ' + btoa(client_id + ':' + client_secret)
+			},
+		}
+		).then(function (response => { 
+			refresh_token = response.data.refresh_token;                  
+		}) {
+			console.log(response.data);
+		});
+	  }
+	  setInterval(refresh, 1000 * 56 * 56);
+
+      // Connect to the player!
+      player.connect();
+    };
+})();
     </script>
   </body>
 </html>
